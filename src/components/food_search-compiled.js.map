{"version":3,"sources":["food_search.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;IAEM,U;;;AACJ,sBAAY,KAAZ,EAAmB;AAAA;;AAAA,wHACX,KADW;;AAGjB,UAAK,KAAL,GAAa;AACX,YAAM,EADK;AAEX,aAAO;AAFI,KAAb;AAHiB;AAOlB;;;;6BAEQ,C,EAAG;AACV,UAAM,QAAQ,eAAd;;AAEA,UAAI,CAAC,KAAK,KAAL,CAAW,IAAhB,EAAsB;AACpB,UAAE,cAAF;AACA,aAAK,QAAL,CAAc,EAAE,OAAO,4BAAT,EAAd;AACD,OAHD,MAGO,IAAI,CAAC,MAAM,IAAN,CAAW,KAAK,KAAL,CAAW,IAAtB,CAAL,EAAkC;AACvC,UAAE,cAAF;AACA,aAAK,QAAL,CAAc,EAAE,OAAO,iCAAT,EAAd;AACD;;AAED,UAAI,KAAK,KAAL,CAAW,KAAf,EAAsB;AACpB;AACD;;AAED,cAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,IAAvB;AACA,WAAK,KAAL,CAAW,WAAX,CAAuB,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAvC,EAA6C,KAAK,KAAL,CAAW,IAAxD;AACD;;;gCAEW,C,EAAG;AACb,WAAK,QAAL,CAAc,EAAE,MAAM,EAAE,MAAF,CAAS,KAAjB,EAAd;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE,iDAAO,MAAK,MAAZ;AACO,uBAAY,2BADnB;AAEO,iBAAO,KAAK,KAAL,CAAW,IAFzB;AAGO,oBAAW,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AAHlB,UAFF;AAOE;AAAA;AAAA,YAAM,SAAU,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAhB,EAA2C,IAAG,SAA9C;AAAA;AAAA;AAPF,OADF;AAWD;;;;;;AAGH,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,SAAO,EAAE,MAAM,MAAM,IAAd,EAAP;AACD;;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACpC,SAAO,+BAAmB,EAAE,+BAAF,EAAnB,EAAiD,QAAjD,CAAP;AACD;;kBAEc,yBAAQ,eAAR,EAAyB,kBAAzB,EAA6C,UAA7C,C","file":"food_search-compiled.js","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\n\nimport { fetchVenues } from '../actions/index';\n\nclass FoodSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      food: '',\n      error: ''\n    }\n  }\n\n  validate(e) {\n    const regex = /^[a-zA-Z\\s]*$/;\n\n    if (!this.state.food) {\n      e.preventDefault();\n      this.setState({ error: 'This field cannot be empty' });\n    } else if (!regex.test(this.state.food)) {\n      e.preventDefault();\n      this.setState({ error: 'This field only accepts letters' });\n    }\n\n    if (this.state.error) {\n      return;\n    }\n\n    console.log(this.props.city);\n    this.props.fetchVenues(this.props.city.city, this.state.food);\n  }\n\n  updateState(e) {\n    this.setState({ food: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"search-container\">\n        <h1>SNACKSHACK</h1>\n        <input type=\"text\"\n               placeholder=\"Enter a type of food here\"\n               value={this.state.food}\n               onChange={ this.updateState.bind(this) }\n        />\n        <Link onClick={ this.validate.bind(this) } to='/venues'>Search</Link>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { city: state.city };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchVenues: fetchVenues }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FoodSearch);"]}