{"version":3,"sources":["food_search.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;IAEM,U;;;AACJ,sBAAY,KAAZ,EAAmB;AAAA;;AAAA,wHACX,KADW;;AAGjB,UAAK,KAAL,GAAa;AACX,YAAM,EADK;AAEX,aAAO;AAFI,KAAb;AAHiB;AAOlB;;;;wCAEmB;AAClB,WAAK,WAAL,CAAiB,KAAjB;AACD;;;6BAEQ,C,EAAG;AACV,UAAM,QAAQ,eAAd;;AAEA,UAAI,CAAC,KAAK,KAAL,CAAW,IAAhB,EAAsB;AACpB,UAAE,cAAF;AACA,aAAK,QAAL,CAAc,EAAE,OAAO,4BAAT,EAAd;AACD,OAHD,MAGO,IAAI,CAAC,MAAM,IAAN,CAAW,KAAK,KAAL,CAAW,IAAtB,CAAL,EAAkC;AACvC,UAAE,cAAF;AACA,aAAK,QAAL,CAAc,EAAE,OAAO,0CAAT,EAAd;AACD;;AAED,UAAI,KAAK,KAAL,CAAW,KAAf,EAAsB;AACpB;AACD;;AAED,WAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,KAAL,CAAW,IAA/B;AACA,WAAK,KAAL,CAAW,WAAX,CAAuB,KAAK,KAAL,CAAW,IAAlC,EAAwC,KAAK,KAAL,CAAW,IAAnD;AACD;;;gCAEW,C,EAAG;AACb,WAAK,QAAL,CAAc,EAAE,MAAM,EAAE,MAAF,CAAS,KAAjB,EAAd;AACD;;;6BAEQ;AAAA;;AACP,aACE;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE,iDAAO,MAAK,MAAZ;AACO,uBAAY,2BADnB;AAEO,iBAAO,KAAK,KAAL,CAAW,IAFzB;AAGO,eAAK,aAAC,KAAD;AAAA,mBAAW,OAAK,WAAL,GAAmB,KAA9B;AAAA,WAHZ;AAIO,oBAAW,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AAJlB,UAFF;AAQE;AAAA;AAAA,YAAM,SAAU,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAhB,EAA2C,IAAG,SAA9C;AAAA;AAAA;AARF,OADF;AAYD;;;;;;AAGH,SAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC9B,SAAO,EAAE,MAAM,MAAM,KAAN,CAAY,IAApB,EAAP;AACD;;AAED,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACpC,SAAO,+BAAmB;AACxB,mCADwB;AAExB;AAFwB,GAAnB,EAGJ,QAHI,CAAP;AAID;;kBAEc,yBAAQ,eAAR,EAAyB,kBAAzB,EAA6C,UAA7C,C","file":"food_search-compiled.js","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\n\nimport { fetchVenues, saveFood } from '../actions/index';\n\nclass FoodSearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      food: '',\n      error: ''\n    }\n  }\n\n  componentDidMount() {\n    this.searchInput.focus();\n  }\n\n  validate(e) {\n    const regex = /^[a-zA-Z\\s]*$/;\n\n    if (!this.state.food) {\n      e.preventDefault();\n      this.setState({ error: 'This field cannot be empty' });\n    } else if (!regex.test(this.state.food)) {\n      e.preventDefault();\n      this.setState({ error: 'This field only accepts alpha characters' });\n    }\n\n    if (this.state.error) {\n      return;\n    }\n\n    this.props.saveFood(this.state.food);\n    this.props.fetchVenues(this.props.city, this.state.food);\n  }\n\n  updateState(e) {\n    this.setState({ food: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"search-container\">\n        <h1>SNACKSHACK</h1>\n        <input type=\"text\"\n               placeholder=\"Enter a type of food here\"\n               value={this.state.food}\n               ref={(input) => this.searchInput = input }\n               onChange={ this.updateState.bind(this) }\n        />\n        <Link onClick={ this.validate.bind(this) } to='/venues'>Search</Link>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { city: state.query.city };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    fetchVenues: fetchVenues,\n    saveFood: saveFood\n  }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FoodSearch);"]}