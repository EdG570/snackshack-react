{"version":3,"sources":["city_search.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;AAEA;;;;;;;;;;IAEM,U;;;AACJ,sBAAY,KAAZ,EAAmB;AAAA;;AAAA,wHACX,KADW;;AAGjB,UAAK,KAAL,GAAa;AACX,YAAM,EADK;AAEX,aAAO;AAFI,KAAb;AAHiB;AAOlB;;;;6BAEQ,C,EAAG;AACV,UAAM,QAAQ,eAAd;;AAEA,UAAI,CAAC,KAAK,KAAL,CAAW,IAAhB,EAAsB;AACpB,UAAE,cAAF;AACA,aAAK,QAAL,CAAc,EAAE,OAAO,4BAAT,EAAd;AACD,OAHD,MAGO,IAAI,CAAC,MAAM,IAAN,CAAW,KAAK,KAAL,CAAW,IAAtB,CAAL,EAAkC;AACvC,UAAE,cAAF;AACA,aAAK,QAAL,CAAc,EAAE,OAAO,iCAAT,EAAd;AACD;;AAED,UAAI,KAAK,KAAL,CAAW,KAAf,EAAsB;AACpB;AACD;;AAED,WAAK,KAAL,CAAW,QAAX,CAAoB,KAAK,KAAL,CAAW,IAA/B;AACD;;;gCAEW,C,EAAG;AACb,WAAK,QAAL,CAAc,EAAE,MAAM,EAAE,MAAF,CAAS,KAAjB,EAAd;AACA,cAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,IAAvB;AACD;;;6BAEQ;;AAEP,aACE;AAAA;AAAA,UAAK,WAAU,kBAAf;AACE;AAAA;AAAA;AAAA;AAAA,SADF;AAEE;AAAA;AAAA,YAAM,WAAU,WAAhB;AAA6B,eAAK,KAAL,CAAW;AAAxC,SAFF;AAGE,iDAAO,MAAK,MAAZ;AACO,iBAAO,KAAK,KAAL,CAAW,IADzB;AAEO,uBAAY,uBAFnB;AAGO,oBAAW,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AAHlB,UAHF;AAQE;AAAA;AAAA,YAAM,SAAU,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAhB,EAA2C,IAAG,OAA9C;AAAA;AAAA;AARF,OADF;AAYD;;;;;;AAGH,SAAS,kBAAT,CAA4B,QAA5B,EAAsC;AACpC,SAAO,+BAAmB,EAAE,yBAAF,EAAnB,EAA2C,QAA3C,CAAP;AACD;;kBAEc,yBAAQ,IAAR,EAAc,kBAAd,EAAkC,UAAlC,C","file":"city_search-compiled.js","sourcesContent":["import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\n\nimport { saveCity } from '../actions/index';\n\nclass CitySearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      city: '',\n      error: ''\n    };\n  }\n\n  validate(e) {\n    const regex = /^[a-zA-Z\\s]*$/;\n\n    if (!this.state.city) {\n      e.preventDefault();\n      this.setState({ error: 'This field cannot be empty' });\n    } else if (!regex.test(this.state.city)) {\n      e.preventDefault();\n      this.setState({ error: 'This field only accepts letters' });\n    }\n\n    if (this.state.error) {\n      return;\n    }\n\n    this.props.saveCity(this.state.city);\n  }\n\n  updateState(e) {\n    this.setState({ city: e.target.value });\n    console.log(this.state.city);\n  }\n\n  render() {\n\n    return (\n      <div className=\"search-container\">\n        <h1>SNACKSHACK</h1>\n        <span className=\"error-msg\">{this.state.error}</span>\n        <input type=\"text\"\n               value={this.state.city}\n               placeholder=\"Enter a location here\"\n               onChange={ this.updateState.bind(this) }\n        />\n        <Link onClick={ this.validate.bind(this) } to='/food'>Next</Link>\n      </div>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ saveCity: saveCity }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(CitySearch);"]}